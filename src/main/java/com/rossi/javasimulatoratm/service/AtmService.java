package com.rossi.javasimulatoratm.service;

import com.rossi.javasimulatoratm.common.WithdrawalAmount;
import com.rossi.javasimulatoratm.model.Account;
import com.rossi.javasimulatoratm.model.TransferRequest;

import java.math.BigInteger;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.Scanner;

public class AtmService{
    ValidationService validationService = new ValidationService();
    WithdrawService withdrawService = new WithdrawService();
    TransferService transferService = new TransferService();
    List<Account> accounts = Account.getSampleAccounts();
    Scanner input = new Scanner(System.in);
    Random random = new Random();
    public void welcomeScreen(){
        // input acc num
        System.out.print("Enter Account Number: ");
        String accountNumber = input.next();

        if (validationService.validateAccNum(accountNumber)) {
            // input pin
            System.out.print("Enter PIN: ");
            String pin = input.next();

            if (validationService.validatePin(pin)) {
                //validate account
                Optional.ofNullable(validationService.validateAccountLogin(accounts, accountNumber, pin))
                        .ifPresentOrElse(this::transactionScreen, this::welcomeScreen);
            }
            else {
                welcomeScreen();
            }
        }
        else {
            welcomeScreen();
        }
    }

    protected void transactionScreen(Account account){
        System.out.println(
                "1. Withdraw\n" +
                "2. Fund Transfer\n" +
                "3. Exit"
        );
        System.out.print("Please choose option [3]: ");
        String option = input.next();
        switch (option) {
            case "1":
                withdrawScreen(account);
                break;
            case "2":
                transferScreen(account);
                break;
            case "3", "", " ":
                welcomeScreen();
                break;
            default:
                transactionScreen(account);
        }
    }
    protected void withdrawScreen(Account account) {
        System.out.println(
                "1. $10\n" +
                        "2. $50\n" +
                        "3. $100\n" +
                        "4. Other\n" +
                        "5. Back");
        System.out.print("Please choose option[5]: ");
        String option = input.next();
        BigInteger wa = BigInteger.ZERO;

        switch (option) {
            case "1", "2", "3":
                wa = WithdrawalAmount.findByCode(option).map(WithdrawalAmount::getAmount).orElse(BigInteger.ZERO);
                if (withdrawService.withdraw(account, wa)) {
                    summaryOption(account);
                } else {
                    withdrawScreen(account);
                }
                break;
            case "4":
                System.out.println("Other Withdraw");
                System.out.print("Enter amount to withdraw: ");
                String amount = input.next();
                if (validationService.validateWithdrawalAmount(amount)) {
                    wa = new BigInteger(amount);
                    if (withdrawService.withdraw(account, wa)) {
                        summaryOption(account);
                    } else {
                        withdrawScreen(account);
                    }
                } else {
                    withdrawScreen(account);
                }
                break;
            default:
                transactionScreen(account);
        }
    }

    protected void transferScreen(Account account){
        TransferRequest request = new TransferRequest();
        request.setFromAccount(account);
        //input dest account
        System.out.print("Please enter destination account and press enter to continue " +
                "or press cancel (Esc) to go back to Transaction: ");
        request.setToAccountNumber(input.next());

        System.out.print("Please enter transfer amount and press enter to continue " +
                "or press cancel (Esc) to go back to Transaction: ");
        request.setAmount(input.next());

        System.out.print("Reference Number: (This is an autogenerated random 6 digits number)\n" +
                "press enter to continue or press cancel (Esc) to go back to Transaction: ");
        if (input.next().equals("") || input.next().equals(" ")) {
            var refNum = random.nextInt(999999);
            var ref = String.format("%06d", refNum);
            request.setReferenceNumber(ref);

            System.out.println("Transfer Confirmation");
            System.out.println("Destination Account : " + request.getToAccountNumber());
            System.out.println("Transfer Amount     : $" + request.getAmount());
            System.out.println("Reference Number    : " + request.getReferenceNumber());
            System.out.println();
            System.out.print(
                    "1. Confirm Trx\n" +
                    "2. Cancel Trx\n" +
                    "Choose option[2]: "
            );
            String option = input.next();
            switch (option) {
                case "1":
                    if (transferService.transfer(accounts, request)) {
                        summaryOption(account);
                    } else {
                        transactionScreen(account);
                    }
                    break;
                default:
                    transactionScreen(account);
                    break;
            }
        }

    }

    protected void summaryOption(Account account){
        System.out.println(
                "1. Transaction \n" +
                "2. Exit");
        System.out.print("Choose option[2]: ");
        String option = input.next();

        if (option.equals("1")){
            transactionScreen(account);
        }
        else {
            welcomeScreen();
        }
    }




}
