package com.rossi.javasimulatoratm.service;

import com.rossi.javasimulatoratm.model.Account;
import com.rossi.javasimulatoratm.model.TransferRequest;
import java.math.BigInteger;
import java.util.List;

import static com.rossi.javasimulatoratm.common.MessageConstant.INSUFFICIENT_BALANCE;

public class TransferService extends AtmService{

    private ValidationService validationService = new ValidationService();

    protected void transferScreen(Account account){
        TransferRequest request = new TransferRequest();
        request.setFromAccount(account);
        //input dest account
        System.out.print("Please enter destination account and press enter to continue " +
                "or press cancel (Esc) to go back to Transaction: ");

        request.setToAccountNumber(input.nextLine());

        System.out.print("Please enter transfer amount and press enter to continue " +
                "or press cancel (Esc) to go back to Transaction: ");
        request.setAmount(input.nextLine());

        System.out.print("Reference Number: (This is an autogenerated random 6 digits number)\n" +
                "press enter to continue or press cancel (Esc) to go back to Transaction: ");
        input.nextLine();

        var refNum = random.nextInt(999999);
        var ref = String.format("%06d", refNum);
        request.setReferenceNumber(ref);

        System.out.println("Transfer Confirmation");
        System.out.println("Destination Account : " + request.getToAccountNumber());
        System.out.println("Transfer Amount     : $" + request.getAmount());
        System.out.println("Reference Number    : " + request.getReferenceNumber());
        System.out.println();
        System.out.print(
                "1. Confirm Trx\n" +
                "2. Cancel Trx\n" +
                "Choose option[2]: "
        );
        String option = input.nextLine();
        switch (option) {
            case "1":
                if (transfer(accounts, request)) {
                    summaryOption(account);
                } else {
                    transactionScreen(account);
                }
                break;
            default:
                transactionScreen(account);
                break;
        }
    }
    public Boolean transfer(List<Account> accounts, TransferRequest request){
        Account fromAccount = request.getFromAccount();
        Account toAccount = validationService.validateDestinationAccount(accounts, fromAccount.getAccountNumber(), request.getToAccountNumber());
        BigInteger trfAmount;
        if (toAccount == null){
            return Boolean.FALSE;
        }
        if (!validationService.validateTransferAmount(request.getAmount())){
            return Boolean.FALSE;
        }
        trfAmount = new BigInteger(request.getAmount());

        if (trfAmount.compareTo(fromAccount.getBalance()) > 0){
            System.out.println(INSUFFICIENT_BALANCE + trfAmount.toString());
            return Boolean.FALSE;
        }

        fromAccount.setBalance(fromAccount.getBalance().subtract(trfAmount));
        toAccount.setBalance(toAccount.getBalance().add(trfAmount));

        summaryTransfer(request, fromAccount);
        return Boolean.TRUE;
    }

    private void summaryTransfer(TransferRequest request, Account fromAccount){
        System.out.println("Fund Transfer Summary");
        System.out.println("Destination Account : " + request.getToAccountNumber());
        System.out.println("Transfer Amount     : $" + request.getAmount());
        System.out.println("Reference Number    : " + request.getReferenceNumber());
        System.out.println("Balance             : $" + fromAccount.getBalance().toString());
        System.out.println();
    }
}
