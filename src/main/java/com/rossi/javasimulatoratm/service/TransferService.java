package com.rossi.javasimulatoratm.service;

import com.rossi.javasimulatoratm.exception.ValidationException;
import com.rossi.javasimulatoratm.model.Account;
import com.rossi.javasimulatoratm.model.TransferRequest;
import com.rossi.javasimulatoratm.repository.AccountRepository;

import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

import static com.rossi.javasimulatoratm.common.GlobalConstant.*;

public class TransferService{
    private ValidationService validationService = new ValidationService();
    private AccountRepository accountRepository = new AccountRepository();

    private SummaryService summaryService = new SummaryService();

    Scanner input = new Scanner(System.in);
    Random random = new Random();

    protected String transferScreen(Account account){
        TransferRequest request = new TransferRequest();
        request.setFromAccount(account);

        //input dest account
        System.out.print("Please enter destination account and press enter to continue " +
                "or press cancel (X) to go back to Transaction: ");
        String accNumber = input.nextLine();

        if (accNumber.equalsIgnoreCase("X")){
            return MAIN_TRANSACTION_MENU;
        }
        request.setToAccountNumber(accNumber);

        //input trf amount
        System.out.print("Please enter transfer amount and press enter to continue " +
                "or press cancel (X) to go back to Transaction: ");
        String trfAmount = input.nextLine();

        if (trfAmount.equalsIgnoreCase("X")){
            return MAIN_TRANSACTION_MENU;
        }
        request.setAmount(trfAmount);

        //input ref num
        System.out.print("Reference Number: (This is an autogenerated random 6 digits number)\n" +
                "press enter to continue or press cancel (X) to go back to Transaction: ");
        String refStr = input.nextLine();

        if (refStr.equalsIgnoreCase("X")){
            return MAIN_TRANSACTION_MENU;
        }

        var refNum = random.nextInt(999999);
        var ref = String.format("%06d", refNum);
        request.setReferenceNumber(ref);

        //confirmation
        System.out.println("Transfer Confirmation");
        System.out.println("Destination Account : " + request.getToAccountNumber());
        System.out.println("Transfer Amount     : $" + request.getAmount());
        System.out.println("Reference Number    : " + request.getReferenceNumber());
        System.out.print(
                "1. Confirm Trx\n" +
                "2. Cancel Trx\n" +
                "Choose option[2]: "
        );
        String option = input.nextLine();
        try {
            if (option.equals(CONFIRM_TRANSFER)){
                return transfer(request);
            }
            else {
                return MAIN_TRANSACTION_MENU;
            }
        }
        catch (ValidationException e){
            System.out.println(e.getMessage());
            return transferScreen(account);
        }

    }

    private String transfer(TransferRequest request) throws ValidationException{
        Account fromAccount = request.getFromAccount();
        Account toAccount = accountRepository.findByAccountNumber(request.getToAccountNumber());
        BigInteger trfAmount = validationService.validateTransferAmount(request.getAmount()); 
        fromAccount.decreaseBalance(trfAmount);
        toAccount.increaseBalance(trfAmount);
        return summaryTransfer(request, fromAccount);
    }

    private String summaryTransfer(TransferRequest request, Account fromAccount){
        System.out.println("Fund Transfer Summary");
        System.out.println("Destination Account : " + request.getToAccountNumber());
        System.out.println("Transfer Amount     : $" + request.getAmount());
        System.out.println("Reference Number    : " + request.getReferenceNumber());
        System.out.println("Balance             : $" + fromAccount.getBalance().toString());
        return summaryService.summaryOption();
    }
}
