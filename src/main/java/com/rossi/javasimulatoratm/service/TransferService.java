package com.rossi.javasimulatoratm.service;

import com.rossi.javasimulatoratm.exception.ValidationException;
import com.rossi.javasimulatoratm.model.Account;
import com.rossi.javasimulatoratm.model.TransferRequest;
import java.math.BigInteger;
import java.util.List;

public class TransferService extends AtmService{

    protected void transferScreen(Account account){
        TransferRequest request = new TransferRequest();
        request.setFromAccount(account);

        while(true) {
            //input dest account
            System.out.print("Please enter destination account and press enter to continue " +
                    "or press cancel (X) to go back to Transaction: ");
            String accNumber = input.nextLine();

            if (accNumber.equalsIgnoreCase("X")){
                transactionScreen(account);
                break;
            }
            request.setToAccountNumber(accNumber);

            //input trf amount
            System.out.print("Please enter transfer amount and press enter to continue " +
                    "or press cancel (X) to go back to Transaction: ");
            String trfAmount = input.nextLine();

            if (trfAmount.equalsIgnoreCase("X")){
                transactionScreen(account);
                break;
            }
            request.setAmount(trfAmount);

            //input ref num
            System.out.print("Reference Number: (This is an autogenerated random 6 digits number)\n" +
                    "press enter to continue or press cancel (X) to go back to Transaction: ");
            String refStr = input.nextLine();
            
            if(refStr.equalsIgnoreCase("X")){
                transactionScreen(account);
                break;
            }

            var refNum = random.nextInt(999999);
            var ref = String.format("%06d", refNum);
            request.setReferenceNumber(ref);

            //confirmation
            System.out.println("Transfer Confirmation");
            System.out.println("Destination Account : " + request.getToAccountNumber());
            System.out.println("Transfer Amount     : $" + request.getAmount());
            System.out.println("Reference Number    : " + request.getReferenceNumber());
            System.out.println();
            System.out.print(
                    "1. Confirm Trx\n" +
                    "2. Cancel Trx\n" +
                    "Choose option[2]: "
            );
            String option = input.nextLine();
            try {
                switch (option) {
                    case "1":
                        transfer(accounts, request);
                        break;
                    default:
                        transactionScreen(account);
                        break;
                }
            }
            catch (ValidationException e){
                System.out.println(e.getMessage());
                transferScreen(account);
            }
        }
    }

    private void transfer(List<Account> accounts, TransferRequest request) throws ValidationException{
        Account fromAccount = request.getFromAccount();
        Account toAccount = validationService.validateDestinationAccount(accounts, fromAccount.getAccountNumber(), request.getToAccountNumber());
        BigInteger trfAmount = validationService.validateTransferAmount(request.getAmount());
        validationService.validateBalance(fromAccount, trfAmount);
        fromAccount.setBalance(fromAccount.getBalance().subtract(trfAmount));
        toAccount.setBalance(toAccount.getBalance().add(trfAmount));
        summaryTransfer(request, fromAccount);
    }

    private void summaryTransfer(TransferRequest request, Account fromAccount){
        System.out.println("Fund Transfer Summary");
        System.out.println("Destination Account : " + request.getToAccountNumber());
        System.out.println("Transfer Amount     : $" + request.getAmount());
        System.out.println("Reference Number    : " + request.getReferenceNumber());
        System.out.println("Balance             : $" + fromAccount.getBalance().toString());
        System.out.println();
        summaryOption(fromAccount);
    }
}
