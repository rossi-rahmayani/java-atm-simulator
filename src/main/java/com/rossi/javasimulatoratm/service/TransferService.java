package com.rossi.javasimulatoratm.service;

import com.rossi.javasimulatoratm.exception.ValidationException;
import com.rossi.javasimulatoratm.model.Account;
import com.rossi.javasimulatoratm.model.TransferRequest;
import com.rossi.javasimulatoratm.repository.AccountRepository;

import java.math.BigInteger;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import static com.rossi.javasimulatoratm.common.GlobalConstant.CONFIRM_TRANSFER;

public class TransferService{

    private ValidationService validationService = new ValidationService();
    private AtmService atmService = new AtmService();
    private AccountRepository accountRepository = new AccountRepository();

    Scanner input = new Scanner(System.in);
    Random random = new Random();

    protected void transferScreen(Account account){
        TransferRequest request = new TransferRequest();
        request.setFromAccount(account);

        while(true) {
            //input dest account
            System.out.print("Please enter destination account and press enter to continue " +
                    "or press cancel (X) to go back to Transaction: ");
            String accNumber = input.nextLine();

            if (accNumber.equalsIgnoreCase("X")){
                atmService.transactionScreen(account);
                break;
            }
            request.setToAccountNumber(accNumber);

            //input trf amount
            System.out.print("Please enter transfer amount and press enter to continue " +
                    "or press cancel (X) to go back to Transaction: ");
            String trfAmount = input.nextLine();

            if (trfAmount.equalsIgnoreCase("X")){
                atmService.transactionScreen(account);
                break;
            }
            request.setAmount(trfAmount);

            //input ref num
            System.out.print("Reference Number: (This is an autogenerated random 6 digits number)\n" +
                    "press enter to continue or press cancel (X) to go back to Transaction: ");
            String refStr = input.nextLine();
            
            if (refStr.equalsIgnoreCase("X")){
                atmService.transactionScreen(account);
                break;
            }

            var refNum = random.nextInt(999999);
            var ref = String.format("%06d", refNum);
            request.setReferenceNumber(ref);

            //confirmation
            System.out.println("Transfer Confirmation");
            System.out.println("Destination Account : " + request.getToAccountNumber());
            System.out.println("Transfer Amount     : $" + request.getAmount());
            System.out.println("Reference Number    : " + request.getReferenceNumber());
            System.out.println();
            System.out.print(
                    "1. Confirm Trx\n" +
                    "2. Cancel Trx\n" +
                    "Choose option[2]: "
            );
            String option = input.nextLine();
            try {
                switch (option) {
                    case CONFIRM_TRANSFER:
                        transfer(request);
                        break;
                    default:
                        atmService.transactionScreen(account);
                        break;
                }
            }
            catch (ValidationException e){
                System.out.println(e.getMessage());
                transferScreen(account);
            }
        }
    }

    private void transfer(TransferRequest request) throws ValidationException{
        Account fromAccount = request.getFromAccount();
        Account toAccount = accountRepository.findByAccountNumber(request.getToAccountNumber()); //change to repository
        BigInteger trfAmount = validationService.validateTransferAmount(request.getAmount()); 
        fromAccount.decreaseBalance(trfAmount);
        toAccount.increaseBalance(trfAmount);
        summaryTransfer(request, fromAccount);
    }

    private void summaryTransfer(TransferRequest request, Account fromAccount){
        System.out.println("Fund Transfer Summary");
        System.out.println("Destination Account : " + request.getToAccountNumber());
        System.out.println("Transfer Amount     : $" + request.getAmount());
        System.out.println("Reference Number    : " + request.getReferenceNumber());
        System.out.println("Balance             : $" + fromAccount.getBalance().toString());
        System.out.println();
        atmService.summaryOption(fromAccount);
    }
}
